<!doctype html>

<html>
  <head>
    <title>hot-form test</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1, user-scalable=yes">
    <script src="../../webcomponentsjs/webcomponents-lite.js"></script>
    <script src="../../web-component-tester/browser.js"></script>

    <link rel="import" href="../hot-form.html">

    <!-- devDependencies -->
    <link rel="import" href="../../iron-form/iron-form.html">
    <link rel="import" href="../../paper-input/paper-input.html">
    <link rel="import" href="../../paper-toast/paper-toast.html">
    <link rel="import" href="../../paper-button/paper-button.html">
    <link rel="import" href="../../iron-ajax/iron-ajax.html">

    </style>

  </head>
  <body>


    <test-fixture id="ajax">
      <template>
        <iron-ajax></iron-ajax>
      </template>
    </test-fixture>

    <test-fixture id="form-validating">
      <template>
        <hot-form>
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-button">
      <template>
        <hot-form>
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
            <paper-button type="submit" raised id="button"></paper-button>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-button-no-submit">
      <template>
        <hot-form>
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
            <paper-button type="submit-not-set" raised id="button"></paper-button>
          </form>
        </hot-form>
      </template>
    </test-fixture>


    <test-fixture id="form-failing-validation">
      <template>
        <hot-form>
          <form is="iron-form" method="POST" action="submit_not_validating">
            <paper-input name="maker" id="maker" ></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-custom-messages">
      <template>
        <hot-form submit-message="custom-submit-message" success-message="custom-success-message">
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-failing-validation-custom-messages-1">
      <template>
        <hot-form default-error-message="custom-default-error-message">
          <form is="iron-form" method="POST" action="submit_not_validating">
            <paper-input name="maker" id="maker" ></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-failing-validation-custom-messages-2">
      <template>
        <hot-form default-error-message="custom-default-error-message">
          <form is="iron-form" method="POST" action="BROKEN">
            <paper-input name="maker" id="maker" ></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-with-record-id">
      <template>
        <hot-form record-id="666" no-record-id-autoload>
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-with-record-id-no-set">
      <template>
        <hot-form record-id="666" no-record-id-autoload action-after-put-response="reset">
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-with-record-id-reset">
      <template>
        <hot-form action-after-post-response="reset" no-record-id-autoload>
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-without-record-id-set">
      <template>
        <hot-form action-after-post-response="set">
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <test-fixture id="form-validating-with-record-id-with-autoload">
      <template>
        <hot-form record-id="666">
          <form is="iron-form" method="POST" action="submit_validating">
            <paper-input name="maker" id="maker"></paper-input>
            <paper-input name="model" id="model"></paper-input>
          </form>
        </hot-form>
      </template>
    </test-fixture>

    <script>
      suite('hot-form', function() {

        test('instantiating the element works', function() {
          var formElement = fixture('form-validating');
          assert.equal(formElement.is, 'hot-form');
        });

        suite("Check server validations", function(){

          var server;
          var responseHeaders = {
            json: { 'Content-Type': 'application/json' },
            text: { 'Content-Type': 'text/html' }
          };
          setup(function() {

            //sinon.log = function( message ){  console.log( "HERE!", message ); };

            server = sinon.fakeServer.create();

            server.respondWith(
              'POST',
              'submit_validating', [
                200,
                responseHeaders.json,
                '{"maker":"Volvo","model":"390"}'
              ]
            );

            server.respondWith(
              'PUT',
              'submit_validating/666', [
                200,
                responseHeaders.json,
                '{"maker":"Volvo","model":"395"}'
              ]
            );

            server.respondWith(
              'GET',
              'submit_validating/666', [
                200,
                responseHeaders.json,
                '{"maker":"Volvo","model":"397"}'
              ]
            );

            server.respondWith(
              'POST',
              'submit_not_validating', [
                422,
                responseHeaders.json,
                '{"message":"Unprocessable Entity","errors":[{"field":"maker","message":"Maker is not acceptable"}]}'
              ]
            );

            server.respondWith(
              'POST',
              'submit_not_validating_wrong_field', [
                422,
                responseHeaders.json,
                '{"message":"Unprocessable Entity","errors":[{"field":"makerNOTTHERE","message":"Maker is not acceptable"}]}'
              ]
            );
          });

          teardown(function() {
            server.restore();
          });

          suite("Running AJAX calls", function(){

            var ajax, request;

            setup( function(){
              ajax = fixture('ajax');
            })


            test('Form call with no error', function( done ){
              var fx = fixture('form-validating');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                expect( inputMaker.invalid ).to.be.false;
                expect( inputModel.invalid).to.be.false;
                done();
              });
              fx.addEventListener( 'iron-form-error', function( e ){
                expect( "I should not be here" ).to.be.equal("I am here");
                done();
              });

              form.submit();
              server.respond();
            });


            test('Form call with error', function( done ){
              var fx = fixture('form-failing-validation');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                expect( "I should not be here" ).to.be.equal("I am here");
                done();
              });
              fx.addEventListener( 'iron-form-error', function( e ){
                expect( inputMaker.invalid ).to.be.true;
                expect( inputModel.invalid).to.be.false;
                expect( e.detail.request.xhr.response.message).to.equal('Unprocessable Entity');
                done();
              });

              form.submit();
              server.respond();
            });


            test('Form call, default user messages, no error', function( done ){
              var fx = fixture('form-validating');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";
              var c = 0;

              fx.addEventListener( 'user-message-info', function( e ){
                expect( e.detail.message ).to.be.equal("Saving...");
                maybeDone();
              });

              fx.addEventListener( 'user-message-success', function( e ){
                expect( e.detail.message ).to.be.equal("Success!");
                maybeDone();
              });

              function maybeDone(){
                if( ++c == 2 ) done();
              }

              form.submit();
              server.respond();
            });


            test('Form call, custom user messages, no error', function( done ){
              var fx = fixture('form-validating-custom-messages');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";
              var c = 0;

              fx.addEventListener( 'user-message-info', function( e ){
                expect( e.detail.message ).to.be.equal("custom-submit-message");
                maybeDone();
              });

              fx.addEventListener( 'user-message-success', function( e ){
                expect( e.detail.message ).to.be.equal("custom-success-message");
                maybeDone();
              });

              function maybeDone(){
                if( ++c == 2 ) done();
              }

              form.submit();
              server.respond();
            });

            test('Form call, custom user messages not used, error', function( done ){
              var fx = fixture('form-failing-validation-custom-messages-1');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";
              var c = 0;

              fx.addEventListener( 'user-message-error', function( e ){
                expect( e.detail.message ).to.be.equal("Unprocessable Entity");
                maybeDone();
              });


              function maybeDone(){
                if( ++c == 1 ) done();
              }

              form.submit();
              server.respond();
            });



            test('Form call, custom user messages, error', function( done ){
              var fx = fixture('form-failing-validation-custom-messages-2');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";
              var c = 0;

              fx.addEventListener( 'user-message-error', function( e ){
                expect( e.detail.message ).to.be.equal("custom-default-error-message");
                maybeDone();
              });

              function maybeDone(){
                if( ++c == 1 ) done();
              }

              form.submit();
              server.respond();
            });


            test('Form call with no error, record-id, setting values back in the form', function( done ){
              var fx = fixture('form-validating-with-record-id');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                var d = e.detail;
                expect( inputMaker.invalid ).to.be.false;
                expect( inputModel.invalid).to.be.false;
                expect( d.response.model ).to.be.equal('395');
                expect( inputModel.value ).to.be.equal('395');
                done();
              });

              form.submit();
              server.respond();
            });

            test('Form call with no error, record-id, NOT setting values back in the form', function( done ){
              var fx = fixture('form-validating-with-record-id-no-set');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                var d = e.detail;
                expect( inputMaker.invalid ).to.be.false;
                expect( inputModel.invalid).to.be.false;
                expect( d.response.model ).to.be.equal('395');
                expect( inputModel.value ).to.be.equal('380');
                done();
              });
              fx.addEventListener( 'iron-form-error', function( e ){
                expect( "I should not be here" ).to.be.equal("I am here");
                done();
              });

              form.submit();
              server.respond();
            });

            test('Values are loaded with a GET beforehand', function( done ){
              var fx = fixture('form-validating-with-record-id-with-autoload');
              var form = Polymer.dom( fx ).querySelector('form');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');

              fx.request.addEventListener( 'response', function( e ){
                var d = e.detail;
                expect( inputModel.value).to.be.equal('397');
                done();
              });

              setTimeout( function(){
                server.respond();
              }, 100)

            });


            test('Form call with no error, submission with clicking a button', function( done ){
              var fx = fixture('form-validating-button');
              var form = Polymer.dom( fx ).querySelector('form');
              var button = Polymer.dom( form ).querySelector('#button');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                expect( inputMaker.invalid ).to.be.false;
                expect( inputModel.invalid).to.be.false;
                done();
              });
              fx.addEventListener( 'iron-form-error', function( e ){
                expect( "I should not be here" ).to.be.equal("I am here");
                done();
              });

              button.click();
              server.respond();
            });


            test('Form call with no error, submission with clicking a button failing', function( done ){
              this.timeout( 200 );
              var fx = fixture('form-validating-button-no-submit');
              var form = Polymer.dom( fx ).querySelector('form');
              var button = Polymer.dom( form ).querySelector('#button');
              var inputMaker = Polymer.dom( form ).querySelector('#maker');
              var inputModel = Polymer.dom( form ).querySelector('#model');
              inputMaker.value = "Volvo";
              inputModel.value = "380";

              fx.addEventListener( 'iron-form-response', function( e ){
                expect( "I should not be here" ).to.be.equal("I am here");
                done();
              });

              setTimeout(
                function(){
                  expect( "This test has passed" ).to.be.equal("This test has passed");
                  done();
                }, 100 );


              button.click();
              server.respond();
            });


          })

        })

      });
    </script>
  </body>
</html>
